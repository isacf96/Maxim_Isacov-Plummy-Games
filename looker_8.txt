view: currency_earn {
  derived_table: {
    sql:
      SELECT
        user_pseudo_id AS user_pseudo_id,
        user_id AS user_id,
        (SELECT value.string_value FROM UNNEST(user_properties) WHERE key="user_aud") AS user_aud,
        (SELECT value.int_value FROM UNNEST(user_properties) WHERE key="ga_session_number") AS ga_sess_num,
        user_first_touch_timestamp AS user_first_touch_timestamp,
        DATETIME(TIMESTAMP_MICROS(user_first_touch_timestamp)) AS first_date,
        event_timestamp AS event_timestamp,
        DATETIME(TIMESTAMP_MICROS(event_timestamp)) AS event_date,
        DATETIME_DIFF(DATETIME(TIMESTAMP_MICROS(event_timestamp)), DATETIME(TIMESTAMP_MICROS(user_first_touch_timestamp)), DAY) AS ret_day,
        event_name AS event_name,
        geo.country AS country,
        platform AS platform,
        (SELECT value.string_value FROM UNNEST(user_properties) WHERE key="config_version") AS config_version,
        (SELECT value.string_value FROM UNNEST(user_properties) WHERE key="app_version") AS app_version,
        (SELECT value.string_value FROM UNNEST(user_properties) WHERE key="user_level") AS user_level,
        (SELECT value.string_value FROM UNNEST(user_properties) WHERE key="game_level") AS game_level,
        (SELECT value.string_value FROM UNNEST(event_params) WHERE key="source") AS earn_source,
        (SELECT value.string_value FROM UNNEST(event_params) WHERE key="currency_type") AS currency,
        (SELECT value.int_value FROM UNNEST(event_params) WHERE key="amount") AS amount
      FROM `analytics_282550042.events_*`
      WHERE event_name IN ("virtual_currency_earn")
      and device.operating_system = 'Android'
        and geo.country = 'United Kingdom'
        and (extract (datetime from TIMESTAMP_MICROS(user_first_touch_timestamp) at time zone 'Europe/Chisinau')) >= '2023-01-01'
        AND user_id IS NOT NULL
      ;;
  }

  dimension: primary_key {
    primary_key: yes
    sql: CONCAT(${TABLE}.user_pseudo_id,${TABLE}.user_id,${TABLE}.event_name,${TABLE}.event_timestamp) ;;
  }

  dimension: user_pseudo_id {
    type: string
    sql: ${TABLE}.user_pseudo_id ;;
  }

  dimension: user_id {
    type: string
    sql: ${TABLE}.user_id ;;
  }

  dimension: user_audience {
    type: string
    sql: ${TABLE}.user_aud ;;
  }

  dimension: session_number {
    type: number
    sql: ${TABLE}.ga_sess_num ;;
  }

  dimension_group: first_open {
    group_label: "First Open Date"
    description: "The time at which the user first opened the app."
    timeframes: [raw,time,hour,minute,date, week, day_of_week, month, year]
    type: time
    convert_tz: no
    sql: TIMESTAMP_MICROS(${TABLE}.user_first_touch_timestamp) ;;
  }

  dimension_group: event_date {
    group_label: "Event Date"
    description: "The time when an event has been occured."
    timeframes: [raw,time,hour,minute,date, week, day_of_week, month, year]
    type: time
    convert_tz: no
    sql: TIMESTAMP_MICROS(${TABLE}.event_timestamp) ;;
  }

  dimension: retention_day {
    type: number
    sql: ${TABLE}.ret_day ;;
  }

  dimension: event_name {
    type: string
    sql: ${TABLE}.event_name ;;
  }

  dimension: country {
    type: string
    sql: ${TABLE}.country ;;
  }

  dimension: platform {
    type: string
    sql: ${TABLE}.platform ;;
  }

  dimension: config_version {
    type: string
    sql: ${TABLE}.config_version ;;
  }

  dimension: app_version {
    type: string
    sql: ${TABLE}.app_version ;;
  }

  dimension: user_level {
    type: number
    sql: ${TABLE}.user_level ;;
  }

  dimension: game_level {
    type: number
    sql: ${TABLE}.game_level ;;
  }

  dimension: earn_source {
    type: string
    sql: ${TABLE}.earn_source ;;
  }

  dimension: earn_currency {
    type: string
    sql: ${TABLE}.currency ;;
  }

  dimension: earn_amount {
    type: number
    sql: ${TABLE}.amount ;;
  }

  measure: total_amount {
    type: sum
    sql: ${earn_amount} ;;
  }

  measure: total_users {
    type: count_distinct
    sql: ${user_id};;
  }

  measure: event_count {
    type: count_distinct
    sql: ${primary_key};;
  }

  measure: date_count {
    type: count_distinct
    sql: ${event_date_date};;
  }


}



  # # You can specify the table name if it's different from the view name:
  # sql_table_name: my_schema_name.tester ;;
  #
  # # Define your dimensions and measures here, like this:
  # dimension: user_id {
  #   description: "Unique ID for each user that has ordered"
  #   type: number
  #   sql: ${TABLE}.user_id ;;
  # }
  #
  # dimension: lifetime_orders {
  #   description: "The total number of orders for each user"
  #   type: number
  #   sql: ${TABLE}.lifetime_orders ;;
  # }
  #
  # dimension_group: most_recent_purchase {
  #   description: "The date when each user last ordered"
  #   type: time
  #   timeframes: [date, week, month, year]
  #   sql: ${TABLE}.most_recent_purchase_at ;;
  # }
  #
  # measure: total_lifetime_orders {
  #   description: "Use this for counting lifetime orders across many users"
  #   type: sum
  #   sql: ${lifetime_orders} ;;
  # }


# view: currency_earn {
#   # Or, you could make this view a derived table, like this:
#   derived_table: {
#     sql: SELECT
#         user_id as user_id
#         , COUNT(*) as lifetime_orders
#         , MAX(orders.created_at) as most_recent_purchase_at
#       FROM orders
#       GROUP BY user_id
#       ;;
#   }
#
#   # Define your dimensions and measures here, like this:
#   dimension: user_id {
#     description: "Unique ID for each user that has ordered"
#     type: number
#     sql: ${TABLE}.user_id ;;
#   }
#
#   dimension: lifetime_orders {
#     description: "The total number of orders for each user"
#     type: number
#     sql: ${TABLE}.lifetime_orders ;;
#   }
#
#   dimension_group: most_recent_purchase {
#     description: "The date when each user last ordered"
#     type: time
#     timeframes: [date, week, month, year]
#     sql: ${TABLE}.most_recent_purchase_at ;;
#   }
#
#   measure: total_lifetime_orders {
#     description: "Use this for counting lifetime orders across many users"
#     type: sum
#     sql: ${lifetime_orders} ;;
#   }
# }
